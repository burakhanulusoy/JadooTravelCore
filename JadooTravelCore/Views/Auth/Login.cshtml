@model LoginViewsModel

@{
    ViewData["Title"] = "Giriş Ekranı";
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Giriş</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
            font-family: 'Arial', sans-serif;
        }

        #background-animation {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0;
        }

        .card {
            background: #ffffffdd;
            backdrop-filter: blur(10px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            border-radius: 1rem;
            border-top: 4px solid #f97316;
            padding: 2rem;
            z-index: 1;
            position: relative;
            animation: float 4s ease-in-out infinite;
        }
        keyframes float {
            0%, 100%

        {
            transform: translateY(0);
        }

        50% {
            transform: translateY(-10px);
        }

        }

        .btn-orange {
            background: linear-gradient(90deg, #f97316 0%, #ea580c 100%);
            transition: all 0.3s ease;
        }

            .btn-orange:hover {
                transform: translateY(-3px) scale(1.02);
                box-shadow: 0 8px 16px rgba(0,0,0,0.3);
            }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen">

    <!-- Hareketli arka plan -->
    <div id="background-animation"></div>

    <!-- Login Kartı -->
    <div class="w-full max-w-md card">
        <h1 class="text-3xl font-bold text-orange-600 mb-2 text-center animate-pulse">Hoş Geldiniz!</h1>
        <p class="text-gray-700 text-center mb-8">Devam etmek için giriş yapın</p>

        <form method="post" class="space-y-6">
            <div>
                <input asp-for="UserName" type="text" placeholder="Kullanıcı Adı"
                       class="w-full px-4 py-3 rounded-lg border border-orange-300 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-opacity-50 transition" />
            </div>
            <div>
                <input asp-for="UserPassword" type="password" placeholder="Şifre"
                       class="w-full px-4 py-3 rounded-lg border border-orange-300 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-opacity-50 transition" />
            </div>

            <span class="text-red-500 text-sm">@Html.ValidationSummary()</span>

            <button type="submit"
                    class="w-full text-white py-3 rounded-lg font-semibold btn-orange shadow-lg hover:shadow-xl">
                Giriş Yap
            </button>
        </form>

        <p class="text-center text-gray-700 mt-6">
            Hesabınız yok mu?
            <a href="#" class="text-orange-500 font-semibold hover:underline">Kayıt Ol</a>
        </p>
    </div>

    <!-- Three.js ile hareketli partiküller -->
    <script>
        const container = document.getElementById('background-animation');
        let scene, camera, renderer, particles, particleSystem, particleMaterial;

        function init() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
            camera.position.z = 5;

            renderer = new THREE.WebGLRenderer({ alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            container.appendChild(renderer.domElement);

            particles = new THREE.BufferGeometry();
            const particleCount = 2000;
            const positions = new Float32Array(particleCount * 3);
            for (let i = 0; i < particleCount*3; i++) {
                positions[i] = (Math.random() - 0.5) * 20;
            }
            particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));

            particleMaterial = new THREE.PointsMaterial({
                color: 0xffa500,
                size: 0.05,
                blending: THREE.AdditiveBlending,
                transparent: true
            });

            particleSystem = new THREE.Points(particles, particleMaterial);
            scene.add(particleSystem);

            window.addEventListener('resize', onWindowResize, false);
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        function animate() {
            requestAnimationFrame(animate);
            particleSystem.rotation.y += 0.0005;
            particleSystem.rotation.x += 0.0005;
            const time = Date.now() * 0.001;
            const positions = particles.attributes.position.array;
            for (let i = 0; i < positions.length; i+=3) {
                positions[i+1] += Math.sin(time + positions[i]) * 0.002;
            }
            particles.attributes.position.needsUpdate = true;
            renderer.render(scene, camera);
        }

        init();
        animate();
    </script>

</body>
</html>
